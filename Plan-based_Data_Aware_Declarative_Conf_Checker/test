#!/bin/bash

# Enable exit on error, including non-zero return codes and other exceptions
#set -e

# Path to the base directory where the logs and constraints are stored
BASE_DIR="/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/resources"

# Paths to external libraries (.classpath file)
LIBRARY_PATHS=(
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/DeclareVisualizer.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/guava-16.0.1.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/OpenXES.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/OpenXES-XStream.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/java-cup-11b.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/LTL2Automaton.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/lpsolve55j.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/javailp-1.2a.jar"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/lib/gs-core-2.0.jar"
)

# Join compiled class path with library paths
COMPILED_CLASSES_PATH="/Users/applem2/Downloads/TESI/Project/Aligner/out/production/Aligner"
CLASSPATH="$COMPILED_CLASSES_PATH:$(IFS=:; echo "${LIBRARY_PATHS[*]}")"

# Log and constraints base directories
LOGS_DIR="$BASE_DIR/log-files"
CONSTRAINTS_DIR="$BASE_DIR/declarative-models"

PLANNERS=("fast-downward" "symba2")
PLANNER_DIRS=(
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/fast-downward/shell"
    "/Users/applem2/Downloads/TESI/Project/Aligner/Plan-based_Data_Aware_Declarative_Conf_Checker/seq-opt-symba-2/shell"
)

# Set the timeout threshold in seconds (e.g., 600 for 10 minutes)
TIMEOUT_THRESHOLD=1800

# Total iterations calculation for progress tracking
TOTAL_ITERATIONS=96

CURRENT_ITERATION=0

# Function to display a progress bar
show_progress_bar() {
    local progress=$1
    local total=$2
    local width=50

    # Calculate the completed progress with rounding to the nearest integer
    local completed=$(printf "%.0f" $(echo "scale=2; $progress * $width / $total" | bc))

    # Declare remaining variable
    local remaining=$((width - completed))

    # If progress is equal to total, ensure completed reaches the width and remaining is 0
    if [ "$completed" -ge "$width" ]; then
        completed=$width
        remaining=0
    fi

    # Print the progress bar with carriage return to overwrite the previous line
    printf "\r["
    for ((i = 0; i < completed; i++)); do
        printf "#"
    done
    for ((i = 0; i < remaining; i++)); do
        printf " "
    done
    printf "] %d/%d" "$progress" "$total"
}

# Function to run the timer
start_timer() {
    local timeout=$1
    local start_time=$(date +%s)
    local elapsed=0

    while [ $elapsed -lt $timeout ]; do
        elapsed=$(($(date +%s) - $start_time))
        echo -ne "\rTIME ELAPSED: $(($elapsed / 60))m $(($elapsed % 60))s"
        sleep 1
    done
}

echo "STARTING TESTS"
echo ""

# Loop over planners
for INDEX in "${!PLANNERS[@]}"; do
    PLANNER="${PLANNERS[$INDEX]}"
    PLANNER_DIR="${PLANNER_DIRS[$INDEX]}"

    # Loop over log directories
    for LOG_DIR in "$LOGS_DIR"/*_alphabet/*_constraints; do
        ALPHABET=$(basename "$(dirname "$LOG_DIR")" | cut -d'_' -f1)
        NUM_CONSTRAINTS=$(basename "$LOG_DIR" | cut -d'_' -f1)

        # Find matching constraint file
        CONSTRAINT_FILE="${ALPHABET}_${NUM_CONSTRAINTS}.xml"
        CONSTRAINT_PATH="$CONSTRAINTS_DIR/${ALPHABET}_alphabet/${NUM_CONSTRAINTS}_constraints/$CONSTRAINT_FILE"

        if [[ -f "$CONSTRAINT_PATH" ]]; then
            LOG_FILES=($(find "$LOG_DIR" -type f -name "*${ALPHABET}_${NUM_CONSTRAINTS}*.xes"))

            # Loop over log files that match the alphabet and constraints
            for LOG in "${LOG_FILES[@]}"; do
                CURRENT_ITERATION=$((CURRENT_ITERATION + 1))
                show_progress_bar "$CURRENT_ITERATION" "$TOTAL_ITERATIONS"

                # Extract debug information from the log file name
                if [[ "$LOG" =~ ([0-9]+)_([0-9]+)%_([0-9]+)_(.*)\.xes ]]; then
                    TRACE_LENGTH="${BASH_REMATCH[1]}"
                    NOISE="${BASH_REMATCH[2]}"
                    TRACE_ALPHABET="${BASH_REMATCH[3]}"


                    # Start the timer in the background
                    start_timer "$TIMEOUT_THRESHOLD" &

                    # Print the planner information after the progress bar
                    echo -e "\n----- RUNNING WITH: -----\nPlanner: $PLANNER\nTrace Length: $TRACE_LENGTH\nNoise: $NOISE%\nTrace Alphabet: $TRACE_ALPHABET\nConstraints: $NUM_CONSTRAINTS \n-------------------------"

                    # Execute the planner with the log and constraint files
                    gtimeout $TIMEOUT_THRESHOLD java -cp "$CLASSPATH" main.Main "$PLANNER" "$LOG" "$CONSTRAINT_PATH"
                    EXIT_CODE=$?

                    # Kill the timer if Java execution is finished
                    kill $!
                    echo "EXIT_CODE: $EXIT_CODE"
                    if [[ $EXIT_CODE -eq 124 ]]; then
                        echo "Execution exceeded $TIMEOUT_THRESHOLD seconds. Skipping to the next iteration."
                        OUTPUT_FILE="${PLANNER_DIR}/${PLANNER}_${TRACE_LENGTH}_${NOISE}%_${TRACE_ALPHABET}_${NUM_CONSTRAINTS}_0.txt"
                        touch "$OUTPUT_FILE"
                    elif [[ $EXIT_CODE -eq 255 ]]; then
                        echo -e "\nError encountered with exit code -1. Stopping all tests."
                        exit 1
                    elif [[ $EXIT_CODE -ne 0 ]]; then
                        echo -e "\nError encountered with exit code $EXIT_CODE. Stopping all tests."
                        exit 1
                    fi
                    echo ""
                else
                    echo "Error invalid log file found in the directory: $LOG"
                    exit 1
                fi
            done
        else
            echo "Error combination: No matching constraint file for $CONSTRAINT_PATH"
            exit 1
        fi
    done
done

echo "ALL TESTS COMPLETED"
echo ""
